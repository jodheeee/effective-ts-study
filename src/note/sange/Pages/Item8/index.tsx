import Title from 'note/sange/Components/Title';
import React from 'react';

function Item8() {
  return (
    <section>
      <Title idx={8} title='타입공간 그리고 공간의 심벌' />
    </section>
  );
}

export default Item8;

// 여기서 말하는 심벌은 식별할수있는 식별자
// 보통은 작업 시 타입과 갑에 대해 식별자를 중복으로 적지 않는다. 아니면 프리픽스를 붙여서 작업하기도 한다.
// 동일하게 쓴다면 코드 독해가 어려워질수도 있기 때문이다.
// 보통 type interface 다음에 나오는 식별자 또는 as 와 : 뒤에 오는 식별자는 타입으로 인식하는 반면 let, const, = 뒤에 오는 식별자는 값으로 인식한다.
// 그러나 typeof 같은 경우 타입 또는 값으로 사용 될떄 다른 기능을 한다.
// typeof의 타입관점에서는 값을 읽어 타입으로 전환해준다.
// typeof 값의 관점에서는 보통 우리가 알고있는 대상의 런타임 타입을 문자열로 반환하는 역할을 한다. (string, number, object, ...)
// InstanceType<T>은 인스턴스 타입을 지칭한다.
// 인스턴스 속성 접근자인 []은 타입으로 쓰일때도 동일하게 동작한다.
// obj.key 와 obj['key']는 값이 동일하더라도, 타입이 다를수도 있는 경우가 있다. TODO: 예시 찾기
// 따라서 타압의 속성을 구할떄에는 obj['key'] 방식으로 구하는 것이 옳다.
// [] 안에는 리터럴, 유니온 타입 등 여러 타입을 사용할 수 있다.
// 타입스크립트에서 구조분해할당을 하면 이상하게 인식해 오류가 날수있다. 그렇기때문에 구조분해 할당 시, 타입과 값에 대한 구분을 명확히 작성해주어야 한다.
